Primeiro, criamos nosso novo app com um ng new



Como de costume, nossa primeira coisa a se fazer
após iniciar o ng new é organizar nosso app. 
No HTML do app, pegamos o router outlet e apagamos
todo o restante do html. Em seguida, colocamos nosso 
router lá no nosso app.component para ser mostrado
no app todo.



Depois de organizar tudo, criamos, na pasta src, um preset
de nosso scss. 



Agora, criamos também o arquivo das variáveis do nosso
scss.



Em nosso style principal do app, chamamos os 2 arquivos
de nossa config scss.



Agora, vamos criar um novo arquivo scss para usarmos uma
função que converte todo tipo de px para Rem:

@function rem-calc($size){
    $value: $size / 16;
    @return #{value}rem;
}





Agora, vamos criar nosso primeiro modulo

ng g m pages

Agora, vamos no nosso modulo principal (app.module)
e importamos o nosso novo módulo criado anteriormente





E então, agora, nosso prmieiro componente que será
a página home

ng g c pages/home




Vamos fazer nossa rota utilizando o Lazy loading: 

na rota do app principal:

Aqui utilizamos o loadChildren, que funciona
com uma função de import:

{
    path: '',
    loadChildren: () => import('./pages/pages.module').then(p => p.PagesModule)
  }



na rota do novo modulo:

const routes: Routes = [
  {
    path: '',
    component: HomeComponent
  }
];

chamamos nossa home





Agora criamos mais um componente que ficará na home
chamado Details

 ng g c pages/details --skip-import

aqui tive que importar manualmente por o angular
não sabia em qual módulo importar nosso novo componente


também, já cadastrei-o nas rotas:

{
    path: 'details',
    component: DetailsComponent
  }





Agora vamos finalmente começar realmente nosso projeto



Vamos começar com um novo módulo para criar componentes
compartilháveis

ng g m shared

Criamos nosso componente de header com o nome poke-header

no nosso modulo shared exportamos nosso componente 
poke-header para podermos utiliza-lo em todo nosso app:

@NgModule({
  declarations: [
    PokeHeaderComponent
  ],
  exports: [
    PokeHeaderComponent
  ],


precisamos também importar nosso módulo shared
no nosso módulo pages:

imports: [
    CommonModule,
    RoutingModule,
    SharedModule
  ]



Agora, vamos exportar nosso componente poke header
de dentro de nosso modulo shared para nossa home 
principal que está lá em pages/home



Finalmente, começamos amodificar nosso html:

Começamos colocando nosso header com nossa imagem
do pokedex e o estilizamos

Agora, vamos fazer nosso componente de busca

ng g c shared/poke-search

e o importamos no html da home dentro do pages assim
como feito com o c poke-header

Se não exportamos nossos componentes feitos dentro de
shared um erro aparecerá. Para resolve-lo, basta 
exportar em shared.module como esse exemplo:
exports: [
    PokeHeaderComponent,
    PokeSearchComponent,
    PokeListComponent







Vamos criar agora a região de busca no nosso componente
poke-search:

Para começar, colocamos uma section com nosso input
dentro:

<section>
    <input type="text" placeholder="Buscar Pokemon...">
    <img src="../../../assets/search.svg" alt="Buscar Pokemon..." >
</section>

Agora, é só estiliza-lo.




Em seguida, vamos começar a nossa list.


EM poke-list.html começamos com um <a> para que,
quando clicado, abra uma página que especifica 
o pokemon clicado.
Dentro, fizemos 2 sections; Uma para o nome e especificação
do pokemon e a outra para a imagem do pokemon:


<a class="pokemon">
   <section class="pokemon__status">
    <h2>
        Bulbasaur
    </h2>

    <ul>
        <li>Grass</li>
        <li>Poison</li>
    </ul>
   </section>
   <section class="pokemon__image">
    <img src="../../../assets/pokemon.svg" alt="Bulbasaur">
   </section>
</a>

Agora vamos estilizar.




Vamos começar, agora, a utilizar nosso service.

ng g s service/pokeApi

Vamos fazer uma mini-API. Mas antes, temos que registrar
o HTTP client. Para isso, o registramos lá em app.module
ou seja, no modulo principal.

imports: [
    BrowserModule,
    AppRoutingModule,
    PagesModule,
    HttpClientModule

import  { HttpClientModule } from '@angular/common/http';

Mas por quê usar o httpclient?

Quando queremos fazer alguma requisição fetch
ou ajax, com o Angular temos seu próprio metodo, 
o HttpClient.

Voltando a nosso service, no constructor precisamos 
chamar o metodo do httpclient.

Agora, está tudo pronto. Precisamos agora entender 
como nossa API funcionará.

Ela será simples, trará uma lista de 100 pokemons:
https://pokeapi.co/api/v2/pokemon/?offset=0&limit=100

colocamos nossa api com um metodo privado






Agora, vamos fazer um método que vai 'puxar' nosso
pokemon
Para isso, vamos usar uma coisa do TypeScript: o get.

 get apiListAllPokemons():Observable<any>{
    return 
  }

Mas por que esse Observable?

O observable ficará "observando" o que está na nossa
requisição.

Para fazer nosso observable funcionar, precisamos chamar
um return com this.http.get:
  get apiListAllPokemons():Observable<any>{
    return this.http.get<any>(this.url).pipe(
      
    )
  }
 
mas por que esse pipe?

O pipe nada mais é que como se fosse um filtro no nosso
http que criará uma conexão. No nosso caso, primeiro
vamos fazer um teste que retornará nosso result principal.

no nosso primeiro tap vamos receberr algo e responder algo.

e no outro tap vamos receber uma função que darpa o console log 
de todos os pookemons da api:

get apiListAllPokemons():Observable<any>{
    return this.http.get<any>(this.url).pipe(
      tap(res => res), 
      tap( res => {
        console.log(res)
      })

agora, precisamos pegar nosso service la no osso
copmponente de listagem para fazermos o teste
para visualizar os pokemons.

export class PokeListComponent implements OnInit{
  constructor(
    private pokeApiService: PokeApiService 
  ) {}

  ngOnInit(): void {
    this.pokeApiService.apiListAllPokemons.subscribe(
      res => res
    )
  }

Para ele realemente carregar, precisamos chamar ele
no ngOnInit assim como no exemplo acima.



Agora vamos dar continuidade para fazermos a listagem
dos serviços.

Ao inves de usar o console log para mostrar os valores
que foi apenas uma fforma de teste, vamos utilizar o
seguinte codigo:

res.results.map( (resPokemons: any) => {
	


Precisamos lembrar sempre de usar o Subscribe.

Vamos criar um metodo publico com nosso codigo 
que faz uma chamada get:

public apiGetPokemons( url: string):Observable<any> {
    return this.http.get<any>(url).pipe(
      map(
        res => res
      )
    )
  }


Relembrando passo a passo:

Criamos 2 metodos:
	um get que apiListAllPokemons()
	fizemos um http get com um htt client
	e a partir disso passamos nossa url da api
essa url retornará primeiro um objeto
e dentro desse objeto precisamos pegar outros objetos
por que ela não da o valor cheio. Para isso damos um tap
que primeiro retorna um valor e dentro desse valor
damos outro tap que retornará os results. A partir disso
damos um res.results que fica dentro do nosso objeto 
que trará um array dos pokemons que vem direto da API.
A partir disso, quando recfebemos nosso seguindo tap fazemos
um map dele que cria novos objetos a cada vez que passsamos
em cada array. Usando nosso map do JS, sempre que
passamos por um nó damos um this.apiGetPokemon fazemos
uma chamada que recebe a url que vem do http que vem da api

get apiListAllPokemons():Observable<any>{
    return this.http.get<any>(this.url).pipe(
      tap(res => res), 
      tap( res => {
        res.results.map( (resPokemons: any) => {
          
          this.apiGetPokemons(resPokemons.url).subscribe(
            res => resPokemons.status = res 
          );

        })
      })
    )
  }
  public apiGetPokemons( url: string):Observable<any> {
    return this.http.get<any>(url).pipe(
      map(
        res => res
      )
    )
  }
}






Agora, temos que passar os dados da api para nosso html.


Primeiro fazemos um metodo publico getAllPokemons que
será uma any

no nosso res receberemos o valor de res
ngOnInit(): void {
    this.pokeApiService.apiListAllPokemons.subscribe(
      res => {
      this.getAllPokemons = res.results;

      console.log(this.getAllPokemons);
      }



Agora em nosso html

vamos criar um ng-template

e damos um ngfor no nosso ngtemplate 
<ng-template ngFor let-pokemon [ngForOf]="getAllPokemons">

para popular nossas li com a especialidade de cada pokemon
usamos um ngfor:

  <ul>
             <li *ngFor="let value of pokemon?.status.types">
                {{value.type.name}}

             </li> 


Agora, para adicionarmos a imagem de cada pokemon:

 <section class="pokemon__image">
         <img 
            [src]="pokemon.status.sprites.other.dream_world.front_default" 
            alt="pokemon.name">
        </section>




Agora, vamos adicionar os detalhes de cada pokemon:

Primeiro, em nosso html, vamos adicionar nosso routerLink
para chamar nossa nova págin:
    <a [routerLink]="['details', pokemon.status.id]" class="pokemon" *ngIf="pokemon.status">

Mas, para isso, vamos ter que ir no nosso modulo 
shared e importar o routerLink




Agora, vamos começar a trabalhar nosso search,
ou seja, nossa poke-header:

Em nosso poke-search.component, vamos fazr um novo
output que lançará os dados para que nossa lista possa 
pega-los:

  @Output() public emmitSearch: EventEmitter<string> = new EventEmitter();

agora, fazemos uma função que retorna o search apenas
para teste:
 public search(value: string) {
    console.log(value);
  } 

no nosso html da poke search, aonde colocamos nosso
input, adicionar o seguinte codigo:
    <input type="text" #input (keyup)="search(input.value)" placeholder="Buscar Pokemon...">

para que quando uma tecla for apertada ele jogue na 
função que retorna o valor da string escrita.



Vamos fazer, agora, nossa list realmente fazer o nosso
input para receber o que foi digitado no nosso Output;


Vamos criar uma funcionalidade que vai resgatar o que foi digitado:
public getSearch(value: string) {
    const filter = this.getAllPokemons.filter( (res: any ) => {
      return !res.name.indexOf(value.toLowerCase())
    })

Aqui nascerá um erro. O filtro funcionará mas quando
apagamos ele não volta ao normal.
Para arrumar isso, vamos fazer um novo método
privado:
  private setAllPokemons: any;

e trocamos no nosso subscribe

 res => {
        this.setAllPokemons = res.results
      this.getAllPokemons = this.setAllPokemons;
      }



